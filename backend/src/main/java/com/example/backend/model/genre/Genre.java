package com.example.backend.model.genre;

import lombok.*;
import java.util.Set;
import java.util.HashSet;
import java.util.Objects;
import jakarta.persistence.*;
import com.example.backend.model.game.Game;
import com.fasterxml.jackson.annotation.JsonBackReference;

@Data
@Builder
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Entity(name="Genre")
@Table(
        name = "genres",
        uniqueConstraints = {
        @UniqueConstraint(name="genre_name_unique", columnNames = "genre_name")}
)
public class Genre {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "genre_id", updatable = false)
    private Long genreId;

    @Column (name = "genre_description")
    private String description;

    @Enumerated(EnumType.STRING)
    @Column (name = "genre_name", nullable = false)
    private EGenreName genreName;

    /**
     * This constructor is used by the ORM because the ID is autogenerated.
     * @param description Information about a given genre.
     * @param genreName The name of the genre.
     */
    public Genre(final String description, final EGenreName genreName) {
        this.description = description;
        this.genreName = genreName;
    }

    /**
     * Link to games. (N:M relationship Game and Genre)
     */
    @ManyToMany(mappedBy = "genres")
    @JsonBackReference
    @Builder.Default // Initializes the Set of Game objects automatically.
    private Set<Game> games = new HashSet<>();

    /**
     * Used when adding a new game and mapping one of its genres to this object.
     * @param game A given game.
     */
    public void addGame(final Game game) {
        this.games.add(game);
    }

    /**
     * @param o Other instance Genre.
     * @return True if both objects genre name is equal. If not false.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Genre genre = (Genre) o;
        return this.genreName.equals(genre.genreName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.genreName);
    }
}