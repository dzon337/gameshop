Relationships modeling in Mongo (NoSql)
	Data model should always revolve our use cases
	One document is the smallest atomic unit that can be read at a time	
	
	1:N
	The entity on the side of (1) gets the data of the (N) in embedded form in array form.

	Example: A book has many publishers so we can embedd the publishers in array inside each book object.
	But if the use case is to get only the books this would be inefficient way of storing data.
	
	Another approach is to get each publisher and to get all books -> creates redundancy 
		but if the use case is to get all the publishers of a given book it's better.
	In the latter case there's no need for joins and we make use of data locality, but more disk space
		is needed. Updates are expensive because we need to update on more than one place and no
		atomic write operations are possible.

	Referencing on the one side: Each publisher gets a unique id and for each book we store the title,
		authors, pages + a reference to a publisher.

	Referncing on the many side: Each book gets a unique id and then each publisher gets an array of
		all published books (IDs). Problem is when a publisher publishes a new book id needs to be
		added to the array -> Big documents might arise -> make sure that those referenced items
		are not going to grow a lot.

	N:M 
	Authors and books -> an author might publish many books and a book might have many authors.
		Book and author collection each with unique id (both books and authors).
		Array of author IDs inside book collection

Rules of thumb:
	Denormalization: Allows to avoid application level joins at the expense of having more complex 
		updates.
	Denormalization makes sense if the values of fields are read much more often than they're updated.

	1. Favor embedding unless there's a reason not to.
	2. The need to access an object on its own is a good reason not to embed.
	3. Arrays should not grow without a bound. (Don't embed a to many reference if it's bound to grow a lot)
	4. Application-level joins are not so bad. (Make clever use of indices)

Should I access an embedded object on its own or is it only nessecery in the context of the parent object.
Ratio of updates to reads for a particular field

GOLDEN RULE: Supports the use cases and allows the db to utilize the ressources as efficiently as possible.

Single field index: 
	Choose an attribute of a document in Mongo and this allows the db to traverse the collection faster
Compound field index:
	2 attirbutes -> {userId: 1, scoreId: -1} -> first by userId then by score
Multikey index:
	Defined on array 


Ideas:
	Games are always accessed with their genres, platforms and reviews on the "/home" page for display.
	Reviews for a game can grow but expected order is from 100-1000 (A review won't be updated)
		Can be deleted maybe, if a game or user is removed
		Genres probably won't be updated, but platform maybe if a new one comes out
			Very low update frequency rate for platforms.


	Indexing on my report entity on price because this is the main use case

	Users are going to be immutable data
	Genre also

	Index for user on email or username
	Index for game on name 

	Indexes are expensive and inefficient for collection with high write-read ratio
		because on each write the index needs to be updated

	Compound index for my report -> total profit + genre 

	GameReview is weak entity i.e cannot exist on its own without a corresponding game so it makes sense
		to embed this entity into Game
 




	

	
		